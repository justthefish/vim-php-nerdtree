!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert (Pathed by Dmitry Frank, dimon.frank@gmail.com)	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8.1	//
#:alchemyst-lisp	/home/thefish/projects/alchemyst/lisp/alchemyst-lisp.lisp	/^(defpackage #:alchemyst-lisp$/;"	f
*check-argument-types-explicitly?*	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defvar *check-argument-types-explicitly?* nil$/;"	f
*colour-table*	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defvar *colour-table* nil)$/;"	f
*console-height-table*	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defvar *console-height-table* (make-hash-table))$/;"	f
*console-width-table*	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defvar *console-width-table* (make-hash-table))$/;"	f
*initial-colours*	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defvar *initial-colours*$/;"	f
*invert-y-axis?*	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defvar *invert-y-axis?* nil$/;"	f
*let	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defmacro *let ((&rest clauses) &body body)$/;"	f
*libsdl-loaded*	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defvar *libsdl-loaded* nil)$/;"	f
*libtcod-loaded*	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defvar *libtcod-loaded* nil$/;"	f
*output-file-name*	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/parse-rgb.lisp	/^(defvar *output-file-name* "tcod-colours.lisp"$/;"	f
*rgb-txt-file*	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/parse-rgb.lisp	/^(defvar *rgb-txt-file* "\/etc\/X11\/rgb.txt"$/;"	f
*root*	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defvar *root* (null-pointer) "The root console.")$/;"	f
*root-console-initialised?*	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defvar *root-console-initialised?* nil$/;"	f
*use-contextl*	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defvar *use-contextl* nil$/;"	f
+DEFUN*-ARROW-SYMBOL+	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defconstant +DEFUN*-ARROW-SYMBOL+ '->$/;"	f
+DIJKSTRA-START-VALUE+	/home/thefish/projects/alchemyst/lisp/lib/dijkstra-map/dijkstra-map.lisp	/^(defconstant +DIJKSTRA-START-VALUE+ most-positive-fixnum)$/;"	f
+MAX-RECTITUDE+	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defparameter +MAX-RECTITUDE+ 6$/;"	f
+NOISE-DEFAULT-HURST+	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defconstant +NOISE-DEFAULT-HURST+ 0.5$/;"	f
+NOISE-DEFAULT-LACUNARITY+	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defconstant +NOISE-DEFAULT-LACUNARITY+ 2.0$/;"	f
+NULL+	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defparameter +NULL+ (null-pointer) "The null pointer.")$/;"	f
+fonts-dir+	/home/thefish/projects/alchemyst/lisp/src/globals.lisp	/^(defconstant +fonts-dir+ "fonts")$/;"	f
+screen-height+	/home/thefish/projects/alchemyst/lisp/src/globals.lisp	/^(defconstant +screen-height+ 47)$/;"	f
+screen-width+	/home/thefish/projects/alchemyst/lisp/src/globals.lisp	/^(defconstant +screen-width+ 100)$/;"	f
+version+	/home/thefish/projects/alchemyst/lisp/src/globals.lisp	/^(defconstant +version+ "CL 0.0.1")$/;"	f
+window-title+	/home/thefish/projects/alchemyst/lisp/src/globals.lisp	/^(defconstant +window-title+ (concatenate 'string "Alchemyst" " " +version+))$/;"	f
:cartesian	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defpackage :cartesian$/;"	f
:defstar	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defpackage :defstar$/;"	f
:dijkstra-map	/home/thefish/projects/alchemyst/lisp/lib/dijkstra-map/dijkstra-map.lisp	/^(defpackage :dijkstra-map$/;"	f
:parse-rgb	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/parse-rgb.lisp	/^(defpackage :parse-rgb$/;"	f
:tcod	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defpackage :tcod$/;"	f
<2d-matrix>	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defclass <2d-matrix> ()$/;"	f
<char-matrix>	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defclass <char-matrix> (<2d-matrix>)$/;"	f
=2d-array=	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(deftype =2d-array= (&optional (elt-type '*)) `(array ,elt-type 2))$/;"	f
=2d-vector=	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(deftype =2d-vector= () `(cons =coord= =coord=))$/;"	f
=coord-pair=	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(deftype =coord-pair= () '(cons =coord= =coord=))$/;"	f
=coord=	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(deftype =coord= () 'real)$/;"	f
=degrees=	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(deftype =degrees= () `(real -360 360))$/;"	f
=direction=	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(deftype =direction= () `(integer 1 9))$/;"	f
=distance=	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(deftype =distance= () 'real)$/;"	f
=sign=	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(deftype =sign= () `(integer -1 1))$/;"	f
a*-path	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-type a*-path :pointer)$/;"	f
alignment	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-enum alignment$/;"	f
array-at	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* array-at ((a =2d-array=) (x fixnum) (y fixnum))$/;"	f
assert-postcondition	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defun assert-postcondition (fname clause varnames)$/;"	f
assert-precondition	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defun assert-precondition (fname clause varnames)$/;"	f
background-add-alpha	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun background-add-alpha (alpha)$/;"	f
background-alpha	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun background-alpha (alpha)$/;"	f
background-flag	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-enum background-flag$/;"	f
bresenham-line	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(define-memo-function bresenham-line (x1 y1 x2 y2$/;"	f
bresenham-line-vector	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* bresenham-line-vector ((x1 =coord=) (y1 =coord=)$/;"	f
bsp-ptr	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-type bsp-ptr :pointer)$/;"	f
cartesian-coordinates->dir	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(define-memo-function cartesian-coordinates->dir (x y)$/;"	f
clamp	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defmacro clamp (low hi expr)$/;"	f
colctrl	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-enum colctrl$/;"	f
colctrl->char	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun colctrl->char (ctrl)$/;"	f
color	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color (keywd) (colour keywd))$/;"	f
color->grayscale	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color->grayscale (col) (colour->grayscale col))$/;"	f
color-add	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-add (c1 c2)$/;"	f
color-equals?	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-equals? (c1 c2)$/;"	f
color-get-hsv	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-get-hsv (colour)$/;"	f
color-get-hue	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-get-hue (colour)$/;"	f
color-get-saturation	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-get-saturation (colour)$/;"	f
color-get-value	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-get-value (colour)$/;"	f
color-hsv	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-hsv (hue sat val) (colour-hsv hue sat val))$/;"	f
color-lerp	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-lerp (c1 c2 coef)$/;"	f
color-multiply	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-multiply (c1 c2)$/;"	f
color-multiply-scalar	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-multiply-scalar (c1 value)$/;"	f
color-rgb	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-rgb (r g b) (colour-rgb r g b))$/;"	f
color-set-hsv	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-set-hsv (con hue sat v)$/;"	f
color-set-hue	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-set-hue (colour hue)$/;"	f
color-set-saturation	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-set-saturation (colour sat)$/;"	f
color-set-value	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-set-value (colour val)$/;"	f
color-shift-hue	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-shift-hue (colour hshift)$/;"	f
color-subtract	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun color-subtract (c1 c2)$/;"	f
colour	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defcstruct colour$/;"	f
colour->grayscale	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun colour->grayscale (col)$/;"	f
colournum	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-type colournum :unsigned-int)$/;"	f
console	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-type console :pointer)$/;"	f
console-check-for-keypress	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-check-for-keypress ((flags key-state))$/;"	f
console-get-fading-colour	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun console-get-fading-colour ()$/;"	f
console-get-height-rect	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-get-height-rect ((con console) (x ucoord) (y ucoord)$/;"	f
console-get-height-rect-utf	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-get-height-rect-utf ((con console) (x ucoord) (y ucoord)$/;"	f
console-init-root	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-init-root ((width uint) (height uint)$/;"	f
console-map-string-to-font-utf	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-map-string-to-font-utf ((str string) (fontchar-x uint)$/;"	f
console-print	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-print ((con console) (x ucoord) (y ucoord)$/;"	f
console-print-double-frame	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-print-double-frame ((con console) (x ucoord) (y ucoord)$/;"	f
console-print-ex	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-print-ex ((con console) (x ucoord) (y ucoord)$/;"	f
console-print-ex-utf	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-print-ex-utf ((con console) (x ucoord) (y ucoord)$/;"	f
console-print-frame	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-print-frame ((con console) (x ucoord) (y ucoord)$/;"	f
console-print-rect	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-print-rect ((con console) (x ucoord) (y ucoord)$/;"	f
console-print-rect-ex	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-print-rect-ex ((con console) (x ucoord) (y ucoord)$/;"	f
console-print-rect-ex-utf	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-print-rect-ex-utf ((con console) (x ucoord) (y ucoord)$/;"	f
console-print-rect-utf	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-print-rect-utf ((con console) (x ucoord) (y ucoord)$/;"	f
console-print-utf	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-print-utf ((con console) (x ucoord) (y ucoord)$/;"	f
console-set-char	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-set-char ((con console) (x integer) (y integer)$/;"	f
console-set-color-control	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun console-set-color-control (control-num fore back)$/;"	f
console-wait-for-keypress	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* console-wait-for-keypress ((flush? boolean))$/;"	f
coord-sort	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* coord-sort ((pair1 =coord-pair=) (pair2 =coord-pair=)$/;"	f
coords->row-major-aref	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* coords->row-major-aref ((a =2d-array=) (x fixnum) (y fixnum))$/;"	f
coords-at-distance	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(define-memo-function coords-at-distance (d)$/;"	f
coords-within-distance	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(define-memo-function coords-within-distance (d)$/;"	f
custom-font-flags	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-bitfield custom-font-flags$/;"	f
decompose-color	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun decompose-color (num) (decompose-colour num))$/;"	f
defgeneric*	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defmacro defgeneric* (fname generic-arglist &body options)$/;"	f
define-c-bitfield	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defmacro define-c-bitfield (name &rest clauses)$/;"	f
define-c-enum	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defmacro define-c-enum (name &rest vals)$/;"	f
define-c-function	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defmacro define-c-function ((foreign-fn-name fn-name) return-type args$/;"	f
define-c-type	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defmacro define-c-type (name foreign-type)$/;"	f
defmethod*	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defmacro defmethod* (fname method-arglist &body body)$/;"	f
defparameter*	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defmacro defparameter* (var value &optional docstring)$/;"	f
defun*	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defmacro defun* (fname arglist &body body)$/;"	f
defvar*	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defmacro defvar* (var value &optional docstring)$/;"	f
defvar/param	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defmacro defvar\/param (toplevel-form-name var value &optional docstring)$/;"	f
degrees->radians	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(define-memo-function degrees->radians (deg)$/;"	f
dijkstra-map	/home/thefish/projects/alchemyst/lisp/lib/dijkstra-map/dijkstra-map.lisp	/^(defclass dijkstra-map ()$/;"	f
dijkstra-path	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-type dijkstra-path :pointer)$/;"	f
dijkstra-print	/home/thefish/projects/alchemyst/lisp/lib/dijkstra-map/dijkstra-map.lisp	/^(defun dijkstra-print (dmap &key (max-distance nil))$/;"	f
dijkstra-test	/home/thefish/projects/alchemyst/lisp/lib/dijkstra-map/dijkstra-map.lisp	/^(defun dijkstra-test (&key (root-count 5) (wall? nil) (max-distance nil))$/;"	f
do-2d-array	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmacro do-2d-array ((element a xvar yvar &key (from-end nil)) &body body)$/;"	f
do-2d-array-randomly	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmacro do-2d-array-randomly ((element a xvar yvar)$/;"	f
do-area	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmacro do-area ((x y x1 y1 x2 y2) &body body)$/;"	f
do-area-randomly	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmacro do-area-randomly ((iterx itery x1 y1 x2 y2)$/;"	f
do-array-borders	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmacro do-array-borders ((element xvar yvar array2d &key (corners? t))$/;"	f
do-borders	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmacro do-borders ((x y x1 y1 x2 y2 &key (corners? t)) &body body)$/;"	f
do-borders-no-corners	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmacro do-borders-no-corners ((x y x1 y1 x2 y2) &body body)$/;"	f
do-bresenham-line	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmacro do-bresenham-line ((xvar yvar x1 y1 x2 y2) &body body)$/;"	f
do-for-adjacent-coords	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmacro do-for-adjacent-coords ((a iterx itery x y) &body body)$/;"	f
do-matrix	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmacro do-matrix ((element xvar yvar matrix) &body body)$/;"	f
drawing-character	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-enum drawing-character$/;"	f
event	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-enum event$/;"	f
find-non-empty-column-in-2d-array	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* find-non-empty-column-in-2d-array ((a =2d-array=) &key (from-end nil))$/;"	f
find-non-empty-row-in-2d-array	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* find-non-empty-row-in-2d-array ((a =2d-array=) &key (from-end nil))$/;"	f
flet*	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defmacro flet* (clauses &body body)$/;"	f
fov-algorithm	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-enum fov-algorithm$/;"	f
func-exec	/home/thefish/projects/alchemyst/lisp/alchemyst-lisp.lisp	/^(defun func-exec() $/;"	f
func-exec	/home/thefish/projects/alchemyst/lisp/test/test.lisp	/^(defun func-exec() $/;"	f
game-main	/home/thefish/projects/alchemyst/lisp/alchemyst-lisp.lisp	/^(defun game-main () $/;"	f
game-main	/home/thefish/projects/alchemyst/lisp/test/test.lisp	/^(defun game-main () $/;"	f
get-fonts-list	/home/thefish/projects/alchemyst/lisp/src/ui.lisp	/^(defun get-fonts-list()$/;"	f
get-next-font	/home/thefish/projects/alchemyst/lisp/src/ui.lisp	/^(defun get-next-font () $/;"	f
greatest	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* greatest ((fn function) (seq sequence))$/;"	f
heightmap-add-voronoi	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* heightmap-add-voronoi ((heightmap heightmap-ptr) (num-points uint32)$/;"	f
heightmap-dig-bezier	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* heightmap-dig-bezier ((heightmap heightmap-ptr) (coords list)$/;"	f
heightmap-dig-line	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* heightmap-dig-line ((heightmap heightmap-ptr)$/;"	f
heightmap-kernel-transform	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* heightmap-kernel-transform ((heightmap heightmap-ptr)$/;"	f
heightmap-normalise	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun heightmap-normalise (heightmap min max)$/;"	f
heightmap-ptr	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-type heightmap-ptr :pointer)$/;"	f
heightmap-rain-erosion	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* heightmap-rain-erosion ((heightmap heightmap-ptr) (num-drops fixnum)$/;"	f
hello-world	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun hello-world ()$/;"	f
image	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-type image :pointer)$/;"	f
image-set-key-colour	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun image-set-key-colour (image key-colour)$/;"	f
initialize-instance	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmethod initialize-instance :after ((matrix <2d-matrix>) &key)$/;"	f
initialize-instance	/home/thefish/projects/alchemyst/lisp/lib/dijkstra-map/dijkstra-map.lisp	/^(defmethod initialize-instance :after ((dm dijkstra-map) &key)$/;"	f
invert-color	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun invert-color (num) (invert-colour num))$/;"	f
key	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defstruct key$/;"	f
key->keypress	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun key->keypress (keyptr)$/;"	f
key-bitfield->vk	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun key-bitfield->vk (key-bf)$/;"	f
key-press	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defcstruct key-press$/;"	f
key-state	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-bitfield key-state$/;"	f
keycode	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-enum keycode$/;"	f
labels*	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defmacro labels* (clauses &body body)$/;"	f
lambda*	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defmacro lambda* (arglist &body body)$/;"	f
least	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* least ((fn function) (seq sequence))$/;"	f
legal-console-coordinates?	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defmacro legal-console-coordinates? (con x y)$/;"	f
legal-matrix-coordinates?	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defgeneric legal-matrix-coordinates? (matrix x y))$/;"	f
legal-matrix-coordinates?	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmethod legal-matrix-coordinates? ((matrix <2d-matrix>)$/;"	f
libsdl	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-foreign-library libsdl$/;"	f
libtcod	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-foreign-library libtcod$/;"	f
line-intersection	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* line-intersection ((ax1 =coord=) (ay1 =coord=)$/;"	f
make-color	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun make-color (kwd r g b) (make-colour kwd r g b))$/;"	f
make-colour	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun make-colour (kwd r g b)$/;"	f
make-exec	/home/thefish/projects/alchemyst/lisp/test/test.lisp	/^(defun make-exec ()$/;"	f
mapptr	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-type mapptr :pointer)$/;"	f
matrix-array	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defgeneric matrix-array (matrix))$/;"	f
matrix-array	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmethod matrix-array ((matrix <2d-matrix>))$/;"	f
matrix-blit	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defgeneric matrix-blit (source dest src-x1 src-y1 src-x2 src-y2$/;"	f
matrix-blit	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmethod matrix-blit ((source <2d-matrix>) (dest <2d-matrix>)$/;"	f
matrix-value->string	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defgeneric matrix-value->string (matrix x y))$/;"	f
matrix-value->string	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmethod matrix-value->string ((matrix <2d-matrix>) (x fixnum) (y fixnum))$/;"	f
matrix-value->string	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmethod matrix-value->string ((matrix <char-matrix>)$/;"	f
matrix-value-at	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defgeneric matrix-value-at (matrix x y))$/;"	f
matrix-value-at	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmethod matrix-value-at ((matrix <2d-matrix>) (x fixnum) (y fixnum))$/;"	f
matrix-value-at	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defsetf matrix-value-at set-matrix-value-at)$/;"	f
mouse	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defstruct mouse$/;"	f
mouse-state	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defcstruct mouse-state$/;"	f
my-a*-callback	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defcallback my-a*-callback :float$/;"	f
my-bresenham-callback	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defcallback my-bresenham-callback :boolean$/;"	f
my-bsp-callback	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defcallback my-bsp-callback :boolean$/;"	f
named-*let-aux	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defun named-*let-aux (name clauses body)$/;"	f
nlet	/home/thefish/projects/alchemyst/lisp/lib/defstar/defstar.lisp	/^(defmacro nlet (name (&rest bindings) &body body)$/;"	f
noise	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-type noise :pointer)$/;"	f
noise-type	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-enum noise-type$/;"	f
parse-mouse-state	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun parse-mouse-state (mouseptr)$/;"	f
parse-rgb-file	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/parse-rgb.lisp	/^(defun parse-rgb-file (&key (infile *rgb-txt-file*)$/;"	f
parser	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-type parser :pointer)$/;"	f
polar->cartesian-x	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(define-memo-function polar->cartesian-x (rho theta)$/;"	f
polar->cartesian-y	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(define-memo-function polar->cartesian-y (rho theta)$/;"	f
polar-rho	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(define-memo-function polar-rho  (x y)$/;"	f
polar-theta	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(define-memo-function polar-theta (x y)$/;"	f
print-2d-array	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* print-2d-array ((a =2d-array=) &key value-print-fn coord-print-fn)$/;"	f
print-coords	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* print-coords ((coords list)$/;"	f
print-matrix	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defgeneric print-matrix (matrix &key))$/;"	f
print-matrix	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmethod print-matrix ((matrix <2d-matrix>) &key printer)$/;"	f
print-polygons	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* print-polygons ((polygons list)$/;"	f
radians->degrees	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(define-memo-function radians->degrees (radians)$/;"	f
rand-between	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun rand-between (min max)$/;"	f
random-coordinates-in-polygon	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun random-coordinates-in-polygon (num vertices)$/;"	f
random-path	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun random-path (x1 y1 x2 y2$/;"	f
random-path-aux	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun random-path-aux (x1 y1 x2 y2$/;"	f
randomptr	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-type randomptr :pointer)$/;"	f
renderer	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-enum renderer$/;"	f
rng-algorithm	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-enum rng-algorithm            ; TCOD_random_algo_t$/;"	f
rng-distribution	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-enum rng-distribution         ; TCOD_distribution_t$/;"	f
row-major-aref->x	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* row-major-aref->x ((a =2d-array=) (n fixnum))$/;"	f
row-major-aref->y	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defun* row-major-aref->y ((a =2d-array=) (n fixnum))$/;"	f
set-matrix-value-at	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defgeneric set-matrix-value-at (matrix x y value))$/;"	f
set-matrix-value-at	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmethod set-matrix-value-at ((matrix <2d-matrix>) (x fixnum) (y fixnum)$/;"	f
signed-char	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(deftype signed-char () `(signed-byte ,(* 8 (foreign-type-size :char))))$/;"	f
sint16	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(deftype sint16 () `(signed-byte 16))$/;"	f
start-colors	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun start-colors () (start-colours))$/;"	f
start-colours	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun start-colours ()$/;"	f
sys-get-current-resolution	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun sys-get-current-resolution ()$/;"	f
sys-get-events	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun sys-get-events ()$/;"	f
sys-save-screenshot	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun sys-save-screenshot (&optional (filename (null-pointer)))$/;"	f
uchar	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(deftype uchar () `(unsigned-byte ,(* 8 (foreign-type-size :unsigned-char))))$/;"	f
ucoord	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(deftype ucoord () `(integer 0 1000))$/;"	f
ui-init	/home/thefish/projects/alchemyst/lisp/src/ui.lisp	/^(defun ui-init () $/;"	f
uint	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(deftype uint () `(unsigned-byte ,(* 8 (foreign-type-size :int))))$/;"	f
uint16	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(deftype uint16 () `(unsigned-byte 16))$/;"	f
uint24	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(deftype uint24 () `(unsigned-byte 24))$/;"	f
uint32	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(deftype uint32 () `(unsigned-byte 32))$/;"	f
uint8	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(deftype uint8 () `(unsigned-byte 8))$/;"	f
with-gensyms	/home/thefish/projects/alchemyst/lisp/lib/cartesian/cartesian.lisp	/^(defmacro with-gensyms ((&rest bindings) &body body)$/;"	f
zip-get-color	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun zip-get-color (zip)$/;"	f
zip-get-colour	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* zip-get-colour ((zip zipptr))$/;"	f
zip-put	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun zip-put (zip val)$/;"	f
zip-put-color	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun zip-put-color (zip color)$/;"	f
zip-put-colour	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(defun* zip-put-colour (zip (colour colournum))$/;"	f
zipptr	/home/thefish/projects/alchemyst/lisp/lib/cl-tcod/tcod.lisp	/^(define-c-type zipptr :pointer)$/;"	f
